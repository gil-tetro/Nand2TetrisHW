// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    //  Inc receives the register's value and increments it.
    Inc16(in=loopedVal, out=loopedValInc);  

    /*  Mux #1 receives the incremented register value and the original and decides which one to keep. 
        It uses the inc parameter for this.
    */
    Mux16(a=loopedVal, b=loopedValInc, sel=inc, out=incOut);

    /*  Mux #2 receives Mux #1's output and the external input and decides which one to keep. 
        This is done according to the load paramter, effectively choosing whether to override the data. 
    */
    Mux16(a=incOut, b=in, sel=load, out=loadOut);

    /*  Mux #3 receives Mux #2's output and a "null" value and decides whether to nullify the data. 
        This is done according to the reset parameter.
        This Mux's output is sent back to the register since it stores our final desired status. 
    */
    Mux16(a=loadOut, b=false, sel=reset, out=resetOut);

    /*  The register always overrides its status because once we reach it, we have the desired status at hand.
        It then sends its output to the out pin and also back to the beginning of the loop.
    */
    Register(in=resetOut, load=true, out=out, out=loopedVal);  
}
